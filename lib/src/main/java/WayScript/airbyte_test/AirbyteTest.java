/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package WayScript.airbyte_test;

import WayScript.airbyte_test.utils.HTTPClient;
import WayScript.airbyte_test.utils.SpeakeasyHTTPClient;

/**
 * Airbyte Configuration API
 * [https://airbyte.io](https://airbyte.io).
 * 
 * This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.
 * 
 * Here are some conventions that this API follows:
 * * All endpoints are http POST methods.
 * * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params.
 * * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`.
 * * For all `update` methods, the whole object must be passed in, even the fields that did not change.
 * 
 * Authentication (OSS):
 * * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': "Basic YWlyYnl0ZTpwYXNzd29yZA=="`
 * 
 * https://airbyte.io - Find out more about Airbyte
 */
public class AirbyteTest {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "http://localhost:8000/api",
	};
  	
    /**
     * Interactions with attempt related resources.
     */
    public Attempt attempt;
    /**
     * Connection between sources and destinations.
     */
    public Connection connection;
    /**
     * Destination related resources.
     */
    public Destination destination;
    /**
     * DestinationDefinition related resources.
     */
    public DestinationDefinition destinationDefinition;
    /**
     * DestinationDefinitionSpecification related resources.
     */
    public DestinationDefinitionSpecification destinationDefinitionSpecification;
    /**
     * Source OAuth related resources to delegate access from user.
     */
    public DestinationOauth destinationOauth;
    /**
     * Healthchecks
     */
    public Health health;
    public Internal internal;
    public Jobs jobs;
    public Logs logs;
    public Notifications notifications;
    public Openapi openapi;
    public Operation operation;
    public Scheduler scheduler;
    /**
     * Source related resources.
     */
    public Source source;
    /**
     * SourceDefinition related resources.
     */
    public SourceDefinition sourceDefinition;
    /**
     * SourceDefinition specification related resources.
     */
    public SourceDefinitionSpecification sourceDefinitionSpecification;
    /**
     * Source OAuth related resources to delegate access from user.
     */
    public SourceOauth sourceOauth;
    /**
     * Interactions with state related resources.
     */
    public State state;
    /**
     * Endpoints for the Airbyte web application. Those APIs should not be called outside the web application implementation and are not
     * guaranteeing any backwards compatibility.
     * 
     */
    public WebBackend webBackend;
    /**
     * Workspace related resources.
     */
    public Workspace workspace;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = WayScript.airbyte_test.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public AirbyteTest build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new AirbyteTest(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private AirbyteTest(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.attempt = new Attempt(this.sdkConfiguration);
		
		this.connection = new Connection(this.sdkConfiguration);
		
		this.destination = new Destination(this.sdkConfiguration);
		
		this.destinationDefinition = new DestinationDefinition(this.sdkConfiguration);
		
		this.destinationDefinitionSpecification = new DestinationDefinitionSpecification(this.sdkConfiguration);
		
		this.destinationOauth = new DestinationOauth(this.sdkConfiguration);
		
		this.health = new Health(this.sdkConfiguration);
		
		this.internal = new Internal(this.sdkConfiguration);
		
		this.jobs = new Jobs(this.sdkConfiguration);
		
		this.logs = new Logs(this.sdkConfiguration);
		
		this.notifications = new Notifications(this.sdkConfiguration);
		
		this.openapi = new Openapi(this.sdkConfiguration);
		
		this.operation = new Operation(this.sdkConfiguration);
		
		this.scheduler = new Scheduler(this.sdkConfiguration);
		
		this.source = new Source(this.sdkConfiguration);
		
		this.sourceDefinition = new SourceDefinition(this.sdkConfiguration);
		
		this.sourceDefinitionSpecification = new SourceDefinitionSpecification(this.sdkConfiguration);
		
		this.sourceOauth = new SourceOauth(this.sdkConfiguration);
		
		this.state = new State(this.sdkConfiguration);
		
		this.webBackend = new WebBackend(this.sdkConfiguration);
		
		this.workspace = new Workspace(this.sdkConfiguration);
	}
}