/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package WayScript.airbyte_test.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SourceDiscoverSchemaRead - Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
 */
public class SourceDiscoverSchemaRead {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakingChange")
    public Boolean breakingChange;

    public SourceDiscoverSchemaRead withBreakingChange(Boolean breakingChange) {
        this.breakingChange = breakingChange;
        return this;
    }
    
    /**
     * describes the available schema (catalog).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog")
    public AirbyteCatalog catalog;

    public SourceDiscoverSchemaRead withCatalog(AirbyteCatalog catalog) {
        this.catalog = catalog;
        return this;
    }
    
    /**
     * Describes the difference between two Airbyte catalogs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalogDiff")
    public CatalogDiff catalogDiff;

    public SourceDiscoverSchemaRead withCatalogDiff(CatalogDiff catalogDiff) {
        this.catalogDiff = catalogDiff;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalogId")
    public String catalogId;

    public SourceDiscoverSchemaRead withCatalogId(String catalogId) {
        this.catalogId = catalogId;
        return this;
    }
    
    /**
     * Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionStatus")
    public ConnectionStatus connectionStatus;

    public SourceDiscoverSchemaRead withConnectionStatus(ConnectionStatus connectionStatus) {
        this.connectionStatus = connectionStatus;
        return this;
    }
    
    @JsonProperty("jobInfo")
    public SynchronousJobRead jobInfo;

    public SourceDiscoverSchemaRead withJobInfo(SynchronousJobRead jobInfo) {
        this.jobInfo = jobInfo;
        return this;
    }
    
    public SourceDiscoverSchemaRead(@JsonProperty("jobInfo") SynchronousJobRead jobInfo) {
        this.jobInfo = jobInfo;
  }
}
