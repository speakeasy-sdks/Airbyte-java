/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package WayScript.airbyte_test.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ConnectionSearch {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionId")
    public String connectionId;

    public ConnectionSearch withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    public DestinationSearch destination;

    public ConnectionSearch withDestination(DestinationSearch destination) {
        this.destination = destination;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationId")
    public String destinationId;

    public ConnectionSearch withDestinationId(String destinationId) {
        this.destinationId = destinationId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ConnectionSearch withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Method used for computing final namespace in destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaceDefinition")
    public NamespaceDefinitionType namespaceDefinition;

    public ConnectionSearch withNamespaceDefinition(NamespaceDefinitionType namespaceDefinition) {
        this.namespaceDefinition = namespaceDefinition;
        return this;
    }
    
    /**
     * Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaceFormat")
    public String namespaceFormat;

    public ConnectionSearch withNamespaceFormat(String namespaceFormat) {
        this.namespaceFormat = namespaceFormat;
        return this;
    }
    
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    public String prefix;

    public ConnectionSearch withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }
    
    /**
     * if null, then no schedule is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public ConnectionSchedule schedule;

    public ConnectionSearch withSchedule(ConnectionSchedule schedule) {
        this.schedule = schedule;
        return this;
    }
    
    /**
     * schedule for when the the connection should run, per the schedule type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleData")
    public ConnectionScheduleData scheduleData;

    public ConnectionSearch withScheduleData(ConnectionScheduleData scheduleData) {
        this.scheduleData = scheduleData;
        return this;
    }
    
    /**
     * determine how the schedule data should be interpreted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleType")
    public ConnectionScheduleType scheduleType;

    public ConnectionSearch withScheduleType(ConnectionScheduleType scheduleType) {
        this.scheduleType = scheduleType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public SourceSearch source;

    public ConnectionSearch withSource(SourceSearch source) {
        this.source = source;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceId")
    public String sourceId;

    public ConnectionSearch withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }
    
    /**
     * Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ConnectionStatus status;

    public ConnectionSearch withStatus(ConnectionStatus status) {
        this.status = status;
        return this;
    }
    
    public ConnectionSearch(){}
}
