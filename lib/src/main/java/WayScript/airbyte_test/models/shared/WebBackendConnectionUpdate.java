/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package WayScript.airbyte_test.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WebBackendConnectionUpdate - Used to apply a patch-style update to a connection, which means that null properties remain unchanged
 */
public class WebBackendConnectionUpdate {
    @JsonProperty("connectionId")
    public String connectionId;

    public WebBackendConnectionUpdate withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geography")
    public GeographyEnum geography;

    public WebBackendConnectionUpdate withGeography(GeographyEnum geography) {
        this.geography = geography;
        return this;
    }
    
    /**
     * Name that will be set to the connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public WebBackendConnectionUpdate withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Method used for computing final namespace in destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaceDefinition")
    public NamespaceDefinitionTypeEnum namespaceDefinition;

    public WebBackendConnectionUpdate withNamespaceDefinition(NamespaceDefinitionTypeEnum namespaceDefinition) {
        this.namespaceDefinition = namespaceDefinition;
        return this;
    }
    
    /**
     * Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaceFormat")
    public String namespaceFormat;

    public WebBackendConnectionUpdate withNamespaceFormat(String namespaceFormat) {
        this.namespaceFormat = namespaceFormat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonBreakingChangesPreference")
    public NonBreakingChangesPreferenceEnum nonBreakingChangesPreference;

    public WebBackendConnectionUpdate withNonBreakingChangesPreference(NonBreakingChangesPreferenceEnum nonBreakingChangesPreference) {
        this.nonBreakingChangesPreference = nonBreakingChangesPreference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifySchemaChanges")
    public Boolean notifySchemaChanges;

    public WebBackendConnectionUpdate withNotifySchemaChanges(Boolean notifySchemaChanges) {
        this.notifySchemaChanges = notifySchemaChanges;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operations")
    public WebBackendOperationCreateOrUpdate[] operations;

    public WebBackendConnectionUpdate withOperations(WebBackendOperationCreateOrUpdate[] operations) {
        this.operations = operations;
        return this;
    }
    
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    public String prefix;

    public WebBackendConnectionUpdate withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }
    
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceRequirements")
    public ResourceRequirements resourceRequirements;

    public WebBackendConnectionUpdate withResourceRequirements(ResourceRequirements resourceRequirements) {
        this.resourceRequirements = resourceRequirements;
        return this;
    }
    
    /**
     * if null, then no schedule is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public ConnectionSchedule schedule;

    public WebBackendConnectionUpdate withSchedule(ConnectionSchedule schedule) {
        this.schedule = schedule;
        return this;
    }
    
    /**
     * schedule for when the the connection should run, per the schedule type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleData")
    public ConnectionScheduleData scheduleData;

    public WebBackendConnectionUpdate withScheduleData(ConnectionScheduleData scheduleData) {
        this.scheduleData = scheduleData;
        return this;
    }
    
    /**
     * determine how the schedule data should be interpreted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleType")
    public ConnectionScheduleTypeEnum scheduleType;

    public WebBackendConnectionUpdate withScheduleType(ConnectionScheduleTypeEnum scheduleType) {
        this.scheduleType = scheduleType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipReset")
    public Boolean skipReset;

    public WebBackendConnectionUpdate withSkipReset(Boolean skipReset) {
        this.skipReset = skipReset;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceCatalogId")
    public String sourceCatalogId;

    public WebBackendConnectionUpdate withSourceCatalogId(String sourceCatalogId) {
        this.sourceCatalogId = sourceCatalogId;
        return this;
    }
    
    /**
     * Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ConnectionStatusEnum status;

    public WebBackendConnectionUpdate withStatus(ConnectionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * describes the available schema (catalog).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncCatalog")
    public AirbyteCatalog syncCatalog;

    public WebBackendConnectionUpdate withSyncCatalog(AirbyteCatalog syncCatalog) {
        this.syncCatalog = syncCatalog;
        return this;
    }
    
    public WebBackendConnectionUpdate(@JsonProperty("connectionId") String connectionId) {
        this.connectionId = connectionId;
  }
}
