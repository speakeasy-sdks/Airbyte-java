/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package WayScript.airbyte_test.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * DestinationDefinitionRead - Successful operation
 */
public class DestinationDefinitionRead {
    @JsonProperty("destinationDefinitionId")
    public String destinationDefinitionId;

    public DestinationDefinitionRead withDestinationDefinitionId(String destinationDefinitionId) {
        this.destinationDefinitionId = destinationDefinitionId;
        return this;
    }
    
    @JsonProperty("dockerImageTag")
    public String dockerImageTag;

    public DestinationDefinitionRead withDockerImageTag(String dockerImageTag) {
        this.dockerImageTag = dockerImageTag;
        return this;
    }
    
    @JsonProperty("dockerRepository")
    public String dockerRepository;

    public DestinationDefinitionRead withDockerRepository(String dockerRepository) {
        this.dockerRepository = dockerRepository;
        return this;
    }
    
    @JsonProperty("documentationUrl")
    public String documentationUrl;

    public DestinationDefinitionRead withDocumentationUrl(String documentationUrl) {
        this.documentationUrl = documentationUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    public String icon;

    public DestinationDefinitionRead withIcon(String icon) {
        this.icon = icon;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public DestinationDefinitionRead withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * describes a normalization config for destination definition
     */
    @JsonProperty("normalizationConfig")
    public NormalizationDestinationDefinitionConfig normalizationConfig;

    public DestinationDefinitionRead withNormalizationConfig(NormalizationDestinationDefinitionConfig normalizationConfig) {
        this.normalizationConfig = normalizationConfig;
        return this;
    }
    
    /**
     * The Airbyte Protocol version supported by the connector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocolVersion")
    public String protocolVersion;

    public DestinationDefinitionRead withProtocolVersion(String protocolVersion) {
        this.protocolVersion = protocolVersion;
        return this;
    }
    
    /**
     * The date when this connector was first released, in yyyy-mm-dd format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("releaseDate")
    public LocalDate releaseDate;

    public DestinationDefinitionRead withReleaseDate(LocalDate releaseDate) {
        this.releaseDate = releaseDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseStage")
    public ReleaseStageEnum releaseStage;

    public DestinationDefinitionRead withReleaseStage(ReleaseStageEnum releaseStage) {
        this.releaseStage = releaseStage;
        return this;
    }
    
    /**
     * actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceRequirements")
    public ActorDefinitionResourceRequirements resourceRequirements;

    public DestinationDefinitionRead withResourceRequirements(ActorDefinitionResourceRequirements resourceRequirements) {
        this.resourceRequirements = resourceRequirements;
        return this;
    }
    
    /**
     * an optional flag indicating whether DBT is used in the normalization. If the flag value is NULL - DBT is not used.
     */
    @JsonProperty("supportsDbt")
    public Boolean supportsDbt;

    public DestinationDefinitionRead withSupportsDbt(Boolean supportsDbt) {
        this.supportsDbt = supportsDbt;
        return this;
    }
    
    public DestinationDefinitionRead(@JsonProperty("destinationDefinitionId") String destinationDefinitionId, @JsonProperty("dockerImageTag") String dockerImageTag, @JsonProperty("dockerRepository") String dockerRepository, @JsonProperty("documentationUrl") String documentationUrl, @JsonProperty("name") String name, @JsonProperty("normalizationConfig") NormalizationDestinationDefinitionConfig normalizationConfig, @JsonProperty("supportsDbt") Boolean supportsDbt) {
        this.destinationDefinitionId = destinationDefinitionId;
        this.dockerImageTag = dockerImageTag;
        this.dockerRepository = dockerRepository;
        this.documentationUrl = documentationUrl;
        this.name = name;
        this.normalizationConfig = normalizationConfig;
        this.supportsDbt = supportsDbt;
  }
}
