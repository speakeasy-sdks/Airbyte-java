/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package WayScript.airbyte_test.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ConnectionUpdate - Used to apply a patch-style update to a connection, which means that null properties remain unchanged
 */
public class ConnectionUpdate {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakingChange")
    public Boolean breakingChange;

    public ConnectionUpdate withBreakingChange(Boolean breakingChange) {
        this.breakingChange = breakingChange;
        return this;
    }
    
    @JsonProperty("connectionId")
    public String connectionId;

    public ConnectionUpdate withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geography")
    public Geography geography;

    public ConnectionUpdate withGeography(Geography geography) {
        this.geography = geography;
        return this;
    }
    
    /**
     * Name that will be set to this connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ConnectionUpdate withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Method used for computing final namespace in destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaceDefinition")
    public NamespaceDefinitionType namespaceDefinition;

    public ConnectionUpdate withNamespaceDefinition(NamespaceDefinitionType namespaceDefinition) {
        this.namespaceDefinition = namespaceDefinition;
        return this;
    }
    
    /**
     * Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaceFormat")
    public String namespaceFormat;

    public ConnectionUpdate withNamespaceFormat(String namespaceFormat) {
        this.namespaceFormat = namespaceFormat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonBreakingChangesPreference")
    public NonBreakingChangesPreference nonBreakingChangesPreference;

    public ConnectionUpdate withNonBreakingChangesPreference(NonBreakingChangesPreference nonBreakingChangesPreference) {
        this.nonBreakingChangesPreference = nonBreakingChangesPreference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifySchemaChanges")
    public Boolean notifySchemaChanges;

    public ConnectionUpdate withNotifySchemaChanges(Boolean notifySchemaChanges) {
        this.notifySchemaChanges = notifySchemaChanges;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationIds")
    public String[] operationIds;

    public ConnectionUpdate withOperationIds(String[] operationIds) {
        this.operationIds = operationIds;
        return this;
    }
    
    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    public String prefix;

    public ConnectionUpdate withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }
    
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceRequirements")
    public ResourceRequirements resourceRequirements;

    public ConnectionUpdate withResourceRequirements(ResourceRequirements resourceRequirements) {
        this.resourceRequirements = resourceRequirements;
        return this;
    }
    
    /**
     * if null, then no schedule is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public ConnectionSchedule schedule;

    public ConnectionUpdate withSchedule(ConnectionSchedule schedule) {
        this.schedule = schedule;
        return this;
    }
    
    /**
     * schedule for when the the connection should run, per the schedule type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleData")
    public ConnectionScheduleData scheduleData;

    public ConnectionUpdate withScheduleData(ConnectionScheduleData scheduleData) {
        this.scheduleData = scheduleData;
        return this;
    }
    
    /**
     * determine how the schedule data should be interpreted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduleType")
    public ConnectionScheduleType scheduleType;

    public ConnectionUpdate withScheduleType(ConnectionScheduleType scheduleType) {
        this.scheduleType = scheduleType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceCatalogId")
    public String sourceCatalogId;

    public ConnectionUpdate withSourceCatalogId(String sourceCatalogId) {
        this.sourceCatalogId = sourceCatalogId;
        return this;
    }
    
    /**
     * Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ConnectionStatus status;

    public ConnectionUpdate withStatus(ConnectionStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * describes the available schema (catalog).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncCatalog")
    public AirbyteCatalog syncCatalog;

    public ConnectionUpdate withSyncCatalog(AirbyteCatalog syncCatalog) {
        this.syncCatalog = syncCatalog;
        return this;
    }
    
    public ConnectionUpdate(@JsonProperty("connectionId") String connectionId) {
        this.connectionId = connectionId;
  }
}
