/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package WayScript.airbyte_test.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * SourceDefinitionRead - Successful operation
 */
public class SourceDefinitionRead {
    @JsonProperty("dockerImageTag")
    public String dockerImageTag;

    public SourceDefinitionRead withDockerImageTag(String dockerImageTag) {
        this.dockerImageTag = dockerImageTag;
        return this;
    }
    
    @JsonProperty("dockerRepository")
    public String dockerRepository;

    public SourceDefinitionRead withDockerRepository(String dockerRepository) {
        this.dockerRepository = dockerRepository;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentationUrl")
    public String documentationUrl;

    public SourceDefinitionRead withDocumentationUrl(String documentationUrl) {
        this.documentationUrl = documentationUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    public String icon;

    public SourceDefinitionRead withIcon(String icon) {
        this.icon = icon;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public SourceDefinitionRead withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The Airbyte Protocol version supported by the connector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocolVersion")
    public String protocolVersion;

    public SourceDefinitionRead withProtocolVersion(String protocolVersion) {
        this.protocolVersion = protocolVersion;
        return this;
    }
    
    /**
     * The date when this connector was first released, in yyyy-mm-dd format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("releaseDate")
    public LocalDate releaseDate;

    public SourceDefinitionRead withReleaseDate(LocalDate releaseDate) {
        this.releaseDate = releaseDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseStage")
    public ReleaseStageEnum releaseStage;

    public SourceDefinitionRead withReleaseStage(ReleaseStageEnum releaseStage) {
        this.releaseStage = releaseStage;
        return this;
    }
    
    /**
     * actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceRequirements")
    public ActorDefinitionResourceRequirements resourceRequirements;

    public SourceDefinitionRead withResourceRequirements(ActorDefinitionResourceRequirements resourceRequirements) {
        this.resourceRequirements = resourceRequirements;
        return this;
    }
    
    @JsonProperty("sourceDefinitionId")
    public String sourceDefinitionId;

    public SourceDefinitionRead withSourceDefinitionId(String sourceDefinitionId) {
        this.sourceDefinitionId = sourceDefinitionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    public SourceDefinitionReadSourceTypeEnum sourceType;

    public SourceDefinitionRead withSourceType(SourceDefinitionReadSourceTypeEnum sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    public SourceDefinitionRead(@JsonProperty("dockerImageTag") String dockerImageTag, @JsonProperty("dockerRepository") String dockerRepository, @JsonProperty("name") String name, @JsonProperty("sourceDefinitionId") String sourceDefinitionId) {
        this.dockerImageTag = dockerImageTag;
        this.dockerRepository = dockerRepository;
        this.name = name;
        this.sourceDefinitionId = sourceDefinitionId;
  }
}
